trigger:
  branches:
    include:
      - master
      # Ensure that CI is triggered for tags
      - refs/tags/*

jobs:
  # Create variables indicating whether or not there are changes in
  # each product folder
  - job: Changes
    steps:
      - script: bash .ci/folder-changes.sh
        name: folders
        displayName: Check which folders have changed

  # Rather than using a job for each product folder, we use a job for
  # each platform and steps within those for each product (as necessary).
  # This is preferable because jobs run on different VMs and so each have to recompile
  # the Rust crate upon which many on the products depend.

  # On Linux, run tests and build for all product folders having changes;
  # CLI is built and published on tags.
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    dependsOn: [Changes]
    variables:
      changed: $[ dependencies.Changes.outputs['folders.changed'] ]
    condition: |
      or(
        contains(variables.changed, 'rust'),
        contains(variables.changed, 'cli'),
        contains(variables.changed, 'node'),
        contains(variables.changed, 'desktop'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      )
    steps:
      # This is split into several steps even thought they often share the same
      # condition simply to improve visibility (ie. its quicker to discover where
      # a build fails if it is broken into several steps)

      # Rust crate is linted if there are changes in the `rust` folder.
      - script: make -C rust lint
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Lint'

      # Rust crate is tested if there are changes in the `rust` folder.
      - script: |
          set -e
          cd rust
          cargo install cargo-tarpaulin
          make cover
          bash <(curl -s https://codecov.io/bash)
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Test'

      # Rust crate is audited if there are changes in the `rust` folder.
      # However, given that this is run at the top level is will audit all dependencies
      # including those used by `cli`, `node` etc
      - script: cargo install cargo-audit && cargo audit
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Audit'

      # CLI is linted if there are changes in the `cli` folder.
      - script: make -C cli lint
        condition: contains(variables.changed, 'cli')
        displayName: 'CLI: Lint'

      # CLI is tested if there are changes in the `rust` or `cli` folders.
      - script: |
          set -e
          cd cli
          cargo install cargo-tarpaulin
          make cover
          bash <(curl -s https://codecov.io/bash)
        condition: or(contains(variables.changed, 'rust'), contains(variables.changed, 'cli'))
        displayName: 'CLI: Test'

      # Node.js package is tested if there are changes in the `rust` or `node` folders.
      - script: |
          set -e
          cd node
          npm install
          make cover
          bash <(curl -s https://codecov.io/bash)
        condition: or(contains(variables.changed, 'rust'), contains(variables.changed, 'node'))
        displayName: 'Node.js: Test'

      # Desktop is tested if there are changes in the `rust`, `node`, or `desktop` folders
      - script: |
          set -e
          make -C node build
          cd desktop
          npm install
          npm run ui:build
          sudo apt-get install rpm
          npm run make
        condition: |
          or(
            contains(variables.changed, 'rust'),
            contains(variables.changed, 'node'),
            contains(variables.changed, 'desktop')
          )
        displayName: 'Desktop: Test'

      # CLI is built and published on tags
      - script: |
          set -e
          cargo install cargo-strip
          make -C cli build
          bash .ci/upload-release.sh target/release/stencila stencila x86_64-unknown-linux-gnu.tar.gz
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'CLI: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # On MacOS, Rust crate is tested if there are changes in `rust` folder, CLI is built and published on tags.
  - job: MacOS
    pool:
      vmImage: macOS-latest
    dependsOn: [Changes]
    variables:
      changed: $[ dependencies.Changes.outputs['folders.changed'] ]
    condition: |
      or(
        contains(variables.changed, 'rust'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      )
    steps:
      - script: make -C rust test
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Test'

      - script: |
          set -e
          cargo install cargo-strip
          make -C cli build
          bash .ci/upload-release.sh target/release/stencila stencila x86_64-apple-darwin.tar.gz
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'CLI: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # On Windows, Rust crate is tested if there are changes in `rust` folder, CLI is built and published on tags.
  - job: Windows
    pool:
      vmImage: windows-latest
    dependsOn: [Changes]
    variables:
      changed: $[ dependencies.Changes.outputs['folders.changed'] ]
    condition: |
      or(
        contains(variables.changed, 'rust'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      )
    steps:
      - script: make -C rust test
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Test'

      - script: |
          set -e
          cargo install cargo-strip
          make -C cli build
          bash .ci/upload-release.sh target/release/stencila.exe stencila x86_64-pc-windows-msvc.zip
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'CLI: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Releases are only made if all three platform builds have succeeded and on the `master` branch.
  - job: Release
    dependsOn: [Linux, MacOS, Windows]
    condition: |
      and(
        in(dependencies.Linux.result, 'Succeeded', 'Skipped'),
        in(dependencies.MacOS.result, 'Succeeded', 'Skipped'),
        in(dependencies.Windows.result, 'Succeeded', 'Skipped'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          contains(dependencies.Changes.outputs['folders.changed'], 'docker')
        )
      )
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          npm ci
          npx semantic-release
        displayName: Create a release (if necessary)
        env:
          GIT_AUTHOR_NAME: Stencila CI Bot
          GIT_AUTHOR_EMAIL: ci@stenci.la
          GIT_COMMITTER_NAME: Stencila CI Bot
          GIT_COMMITTER_EMAIL: ci@stenci.la
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Docker images are built on tags (i.e. after a Release job) or if there is a
  # change in the `docker` folder. It depends on Linux job to ensure that the latest
  # Linux `stencila` binary is available to install into the image.
  - job: Docker
    dependsOn: [Changes, Linux]
    condition: |
      and(
        in(dependencies.Linux.result, 'Succeeded', 'Skipped'),
        or(
          startsWith(variables['Build.SourceBranch'], 'refs/tags/'),
          contains(dependencies.Changes.outputs['folders.changed'], 'docker')
        )
      )
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine version

      - task: Docker@2
        displayName: Build and push stencila/stencila
        inputs:
          command: buildAndPush
          dockerfile: docker/stencila/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/stencila
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest

      - task: Docker@2
        displayName: Build and push stencila/node
        inputs:
          command: buildAndPush
          dockerfile: docker/node/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/node
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest

  # Help site is only built if there are changes in the `help` folder
  # and only published on `master` branch
  - job: Help
    dependsOn: [Changes]
    condition: contains(dependencies.Changes.outputs['folders.changed'], 'help')
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          set -e
          sudo apt-get install pv asciinema
          cd help && npm ci
        displayName: Install dependencies

      - script: make -C help demos reference build
        displayName: Build
        env:
          TERM: dumb

      - script: |
          set -e
          git config --global user.name "Stencila CI Bot"
          git config --global user.email "ci@stenci.la"
          echo "machine github.com login stencila-ci password ${GITHUB_TOKEN}" > ~/.netrc
          GIT_USER="stencila-ci" make -C help deploy
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        displayName: Publish
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
