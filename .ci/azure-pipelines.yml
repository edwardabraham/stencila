trigger:
  branches:
    include:
      - master
      # Ensure that CI is triggered for tags
      - refs/tags/*

jobs:
  # Create variables indicating whether or not there are changes in
  # each product folder
  - job: Changes
    steps:
      - script: |
          PREV=$(git describe --tags --abbrev=0)
          CHANGED=""
          for FOLDER in cli desktop docker help node rust
          do
            git diff --quiet HEAD $PREV -- $FOLDER
            if [ $? -eq 1 ]; then
              $CHANGED = "$CHANGED $FOLDER"
            fi
          done
          echo "Folders with changes: $CHANGED"
          echo "##vso[task.setvariable variable=changed;isOutput=true]$CHANGED"
        name: folders
        displayName: Check which folders have changed

  # Rust crate is built only if there are changes in the `rust` folder
  - job: Rust
    dependsOn: [Changes]
    condition: contains(dependencies.Changes.outputs['folders.changed'], 'rust')
    strategy:
      matrix:
        Linux:
          vmImage: ubuntu-latest
          targetPath: target/release/stencila
          archiveName: x86_64-unknown-linux-gnu.tar.gz
        Mac:
          vmImage: macOS-latest
          targetPath: target/release/stencila
          archiveName: x86_64-apple-darwin.tar.gz
        Windows:
          vmImage: windows-latest
          targetPath: target/release/stencila.exe
          archiveName: x86_64-pc-windows-msvc.zip
    pool:
      vmImage: $(vmImage)
    steps:
      - script: make -C rust lint
        condition: eq(variables['agent.os'], 'Linux')
        displayName: Lint

      - script: cargo install cargo-tarpaulin && make -C rust cover
        condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))
        displayName: Test with coverage

      - script: bash <(curl -s https://codecov.io/bash)
        condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))
        displayName: Upload coverage

      - script: cargo install cargo-audit && cargo audit
        condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))
        displayName: Dependency audit

      - script: make -C rust test
        condition: not(eq(variables['agent.os'], 'Linux'))
        displayName: Test

      - script: |
          set -e
          cargo install cargo-strip
          make build
          bash .ci/upload-release.sh $(targetPath) stencila $(archiveName)
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: Build and upload binaries
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # CLI is built if there are changes in the `rust` or `cli` folders.
  - job: CLI
    dependsOn: [Changes, Rust]
    condition: or(contains(dependencies.Changes.outputs['folders.changed'], 'rust'), contains(dependencies.Changes.outputs['folders.changed'], 'cli'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: make -C cli lint
        displayName: Lint

      - script: cargo install cargo-strip && make -C cli build
        condition: succeeded()
        displayName: Build

  # Node.js package is built if there are changes in the `rust` or `node` folders.
  - job: Node
    dependsOn: [Changes, Rust]
    condition: or(contains(dependencies.Changes.outputs['folders.changed'], 'rust'), contains(dependencies.Changes.outputs['folders.changed'], 'node'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: cd node && npm ci
        displayName: Install dependencies

      - script: make -C node cover
        displayName: Test with coverage

      - script: bash <(curl -s https://codecov.io/bash)
        condition: succeeded()
        displayName: Upload coverage

      - script: make -C node build
        condition: succeeded()
        displayName: Build

  # Desktop client is built if there are changes in the `desktop`, `node`, or
  # `rust` folders.
  - job: Desktop
    dependsOn: [Changes, Node]
    condition: or(contains(dependencies.Changes.outputs['folders.changed'], 'rust'), contains(dependencies.Changes.outputs['folders.changed'], 'node'), contains(dependencies.Changes.outputs['folders.changed'], 'desktop'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: cd desktop && npm install
        displayName: Install dependencies

      - script: |
          set -e
          cd desktop
          npm run ui:build
          npm run package
        displayName: Build

  # Help site is only built if there are changes in the `help` folder
  # and only published on `master` branch
  - job: Help
    dependsOn: [Changes]
    condition: or(contains(dependencies.Changes.outputs['folders.changed'], 'help'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          set -e
          sudo apt-get install pv asciinema
          cd help && npm ci
        displayName: Install dependencies

      - script: make -C help demos resources build
        displayName: Build
        env:
          TERM: dumb

      - script: |
          set -e
          git config --global user.name "Stencila CI Bot"
          git config --global user.email "ci@stenci.la"
          echo "machine github.com login stencila-ci password ${GITHUB_TOKEN}" > ~/.netrc
          GIT_USER="stencila-ci" make -C help deploy
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        displayName: Publish
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Releases are only made if all products have succeeded and on the `master` branch
  - job: Release
    dependsOn: [Rust, CLI, Node, Desktop, Help]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          npm ci
          npx semantic-release
        displayName: Create a release (if necessary)
        env:
          GIT_AUTHOR_NAME: Stencila CI Bot
          GIT_AUTHOR_EMAIL: ci@stenci.la
          GIT_COMMITTER_NAME: Stencila CI Bot
          GIT_COMMITTER_EMAIL: ci@stenci.la
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Docker images are only built on tags (i.e. after a Release job)
  - job: Docker
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine version

      - task: Docker@2
        displayName: Build and push stencila/stencila
        inputs:
          command: buildAndPush
          dockerfile: docker/stencila/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/stencila
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest

      - task: Docker@2
        displayName: Build and push stencila/node
        inputs:
          command: buildAndPush
          dockerfile: docker/node/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/node
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest
