trigger:
  branches:
    include:
      - master
      # Ensure that CI is triggered for tags
      - refs/tags/*

variables:
  # Set this so that `skip_ci` and other functions work as expected
  CI: true

  # Settings for Rust caching. See also:
  #   https://github.com/johnterickson/cargo2junit/blob/master/azure-pipelines.yml
  #   https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
  #   https://levans.fr/rust_travis_cache.html
  RUST_CACHE: $(Build.SourcesDirectory)/rust_cache
  CARGO_HOME: $(RUST_CACHE)/.cargo
  SCCACHE_DIR: $(RUST_CACHE)/sccache
  SCCACHE_CACHE_SIZE: 1G

  # Settings for Rust build
  #
  # Statically link the lzma-sys crate. See https://github.com/stencila/stencila/issues/1038
  LZMA_API_STATIC: 1

jobs:
  # Create variables indicating whether or not there are changes in
  # each product folder
  - job: Changes
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: bash .ci/folder-changes.sh
        name: folders
        displayName: Check which folders have changed

  # Rather than using a job for each product folder, we use a job for
  # each platform and steps within those for each product (as necessary).
  # This is preferable because jobs run on different VMs and so each have to recompile
  # the Rust crate upon which many on the products depend.

  # On Linux, run tests and build for all product folders having changes;
  # CLI is built and published on tags.
  - job: Linux
    timeoutInMinutes: 180
    pool:
      vmImage: ubuntu-latest
    dependsOn: [Changes]
    variables:
      changed: $[ dependencies.Changes.outputs['folders.changed'] ]
    condition: |
      or(
        contains(variables.changed, 'schema'),
        contains(variables.changed, 'rust'),
        contains(variables.changed, 'node'),
        contains(variables.changed, 'desktop'),
        contains(variables.changed, 'web'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      )
    steps:
      # This is split into several steps even thought they often share the same
      # condition simply to improve visibility (ie. its quicker to discover where
      # a build fails if it is broken into several steps)

      # Use caches
      - task: Cache@2
        inputs:
          path: $(RUST_CACHE)
          key: 'Rust | $(Agent.OS) | ./Cargo.toml | ./Cargo.lock | $(Build.SourceVersion)'
          restoreKeys: |
            Rust | $(Agent.OS) | ./Cargo.toml | ./Cargo.lock
            Rust | $(Agent.OS) | ./Cargo.toml
            Rust | $(Agent.OS)

      # Install core Rust build tools if there are changes any folder using Rust.
      # Additional build tools e.g. `tarpaulin` are installed just-in-time given
      # that prior steps may not succeed. This is always done, including for
      # release builds (otherwise they can take longer than the maximum of one hour).
      - script: |
          set -e

          curl -sL https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz | tar xz
          mv -f sccache*/sccache $(CARGO_HOME)/bin/sccache
          chmod +x $(CARGO_HOME)/bin/sccache
          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
          echo "##vso[task.setvariable variable=RUSTC_WRAPPER]sccache"
          cargo list | grep --quiet cache || cargo install cargo-cache
          echo "##vso[task.setvariable variable=RUST_CACHING]true"

          rustc --version
          cargo --version
        displayName: 'Install: Rust build tools'

      # Specify Node.js version to use for `node`, `desktop`, and `web` tests and builds
      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install: Node.js version'

      # Install Jupyter kernels
      - script: |
          set -e
          python3 -m pip install ipykernel
          python3 -m ipykernel install --user
        displayName: 'Install: Jupyter kernels'

      # Schema is tested and built (including language bindings which other modules use)
      # if there are changes in the `schema` folder.
      - script: make -C schema setup test build
        condition: contains(variables.changed, 'schema')
        displayName: 'Schema: Test & Build'

      # Rust crate is linted if there are changes in the `rust` folder.
      - script: make -C rust lint
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Lint'

      # Rust crate is tested if there are changes in the `rust` folder.
      - script: make -C rust test
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Test'

      # Rust crate is audited if there are changes in the `rust` folder and on `master`.
      # However, given that this is run at the top level is will audit all dependencies
      # including those used by `node` etc
      #
      # Note: The has been disabled until the CVEs on time and chrono (which are depended upon by
      # several of our dependencies and by us directly) are sorted out.
      - script: |
          set -e
          cargo list | grep --quiet audit || cargo install cargo-audit
          cargo audit
        condition: and(false, contains(variables.changed, 'rust'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Rust: Audit'

      # Node.js package is tested if there are changes in the `rust` or `node` folders.
      - script: |
          set -e
          cd node
          make cover
          bash <(curl -s https://codecov.io/bash) -F node
        condition: or(contains(variables.changed, 'rust'), contains(variables.changed, 'node'))
        displayName: 'Node.js: Test'
        env:
          # Increase maximum for non-garbage collected memory to 5Gb
          NODE_OPTIONS: --max_old_space_size=5120

      # Desktop is tested if there are changes in the `rust`, `node`, or `desktop` folders.
      # Includes build of UI to check that compiles
      - script: |
          set -e
          make -C node build-debug build-ts
          make -C desktop lint
          make -C desktop test
          npm run ui:build --prefix desktop
        env:
          # Increase maximum for non-garbage collected memory to 6Gb
          NODE_OPTIONS: --max_old_space_size=6144
          TSESTREE_SINGLE_RUN: true
        condition: |
          or(
            contains(variables.changed, 'rust'),
            contains(variables.changed, 'node'),
            contains(variables.changed, 'desktop')
          )
        displayName: 'Desktop: Test'

      # Web client is tested if there are changes in the `web`, or `rust` folders
      # because it includes end-to-end tests of integrations with the Rust server.
      # Starts the build / running of the server in the background while it does install
      # linting etc. Then waits for the port to open before running tests.
      # Use the `--prefix` option rather than `cd web` so that the server runs from the
      # top level directory and thus allows HTTP access to fixtures.
      - script: |
          set -e
          cargo run --manifest-path rust/stencila/Cargo.toml -- server start --url :9000 --insecure &
          make -C node build-ts
          make -C schema setup build
          npm install --prefix web
          npm run lint --prefix web
          while ! echo exit | nc 127.0.0.1 9000; do sleep 5; done
          SERVER_URL="ws://127.0.0.1:9000/~ws" npm test --prefix web
          kill %1
        condition: |
          or(
            contains(variables.changed, 'rust'),
            contains(variables.changed, 'web')
          )
        displayName: 'Web: Test'

      # CLI is built and published on tags
      - script: |
          set -e
          rustup target add x86_64-unknown-linux-musl
          cargo list | grep --quiet strip || cargo install cargo-strip
          make -C rust build
          bash .ci/upload-release.sh target/release/stencila stencila x86_64-unknown-linux-gnu.tar.gz
          bash .ci/upload-release.sh target/x86_64-unknown-linux-musl/release/stencila stencila x86_64-unknown-linux-musl.tar.gz
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'CLI: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

      # Desktop is built and published on tags
      - script: |
          set -e
          make -C node build
          sudo apt-get install rpm
          make -C desktop publish
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'Desktop: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          SENTRY_DSN: $(SENTRY_DSN_DESKTOP)

      # Reduce the size of the Rust cache (and print summary) before storing it.
      - script: |
          sccache --stop-server
          cargo cache --autoclean
        condition: eq(variables.RUST_CACHING, 'true')
        continueOnError: true
        displayName: 'Rust: Clean cache'

  # On MacOS, Rust crate is tested if there are changes in `rust` folder,
  # CLI and desktop are built and published on tags.
  - job: MacOS
    timeoutInMinutes: 180
    pool:
      vmImage: macOS-latest
    dependsOn: [Changes]
    variables:
      changed: $[ dependencies.Changes.outputs['folders.changed'] ]
    condition: |
      or(
        contains(variables.changed, 'rust'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      )
    steps:
      - task: Cache@2
        inputs:
          path: $(RUST_CACHE)
          key: 'Rust | $(Agent.OS) | ./Cargo.toml | ./Cargo.lock | $(Build.SourceVersion)'
          restoreKeys: |
            Rust | $(Agent.OS) | ./Cargo.toml | ./Cargo.lock
            Rust | $(Agent.OS) | ./Cargo.toml
            Rust | $(Agent.OS)

      - script: |
          set -e
          curl -sL https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-apple-darwin.tar.gz | tar xz
          mv -f sccache*/sccache $(CARGO_HOME)/bin/sccache
          chmod +x $(CARGO_HOME)/bin/sccache
          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
          echo "##vso[task.setvariable variable=RUSTC_WRAPPER]sccache"
          cargo list | grep --quiet cache || cargo install cargo-cache
          echo "##vso[task.setvariable variable=RUST_CACHING]true"
        displayName: 'Install: Rust build tools'

      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install: Node.js version'

      - script: |
          set -e
          python3 -m pip install ipykernel
          python3 -m ipykernel install --user
        displayName: 'Install: Jupyter kernels'

      - script: |
          set -e
          cd rust
          cargo test
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Test'

      - task: InstallAppleCertificate@2
        displayName: 'Install code signing certificate'
        inputs:
          certSecureFile: 'AppleCodeSigningCertificate.p12'
          certPwd: $(APPLE_CODESIGN_PASSWORD)

      - script: |
          set -e
          cargo list | grep --quiet strip || cargo install cargo-strip
          make -C rust build
          codesign -s "Stencila Ltd." target/release/stencila
          codesign --display --verbose=4 target/release/stencila
          bash .ci/upload-release.sh target/release/stencila stencila x86_64-apple-darwin.tar.gz
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'CLI: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

      - script: |
          set -e
          make -C node build
          make -C desktop publish
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'Desktop: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          SENTRY_DSN: $(SENTRY_DSN_DESKTOP)
          APPLE_ID: $(APPLE_ID)
          APPLE_ID_PASSWORD: $(APPLE_ID_PASSWORD)

      - script: |
          sccache --stop-server
          cargo cache --autoclean
        condition: eq(variables.RUST_CACHING, 'true')
        continueOnError: true
        displayName: 'Rust: Clean cache'

  # On Windows, Rust crate is tested if there are changes in `rust` folder,
  # CLI and desktop are built and published on tags.
  - job: Windows
    timeoutInMinutes: 180
    pool:
      vmImage: windows-latest
    dependsOn: [Changes]
    variables:
      changed: $[ dependencies.Changes.outputs['folders.changed'] ]
    condition: |
      or(
        contains(variables.changed, 'rust'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      )
    steps:
      - task: Cache@2
        inputs:
          path: $(RUST_CACHE)
          key: 'Rust | $(Agent.OS) | ./Cargo.toml | ./Cargo.lock | $(Build.SourceVersion)'
          restoreKeys: |
            Rust | $(Agent.OS) | ./Cargo.toml | ./Cargo.lock
            Rust | $(Agent.OS) | ./Cargo.toml
            Rust | $(Agent.OS)

      - script: |
          curl -sL https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-pc-windows-msvc.tar.gz -o sccache.tar.gz
          tar -xzf sccache.tar.gz
          mv -f sccache*/sccache $(CARGO_HOME)/bin/sccache
          chmod +x $(CARGO_HOME)/bin/sccache
          echo ##vso[task.prependpath]$(CARGO_HOME)/bin
          echo ##vso[task.setvariable variable=RUSTC_WRAPPER]sccache
          cargo list | grep --quiet cache || cargo install cargo-cache
          echo ##vso[task.setvariable variable=RUST_CACHING]true
        displayName: 'Install: Rust build tools'

      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install: Node.js version'

      - script: |
          set -e
          python3 -m pip install ipykernel
          python3 -m ipykernel install --user
        displayName: 'Install: Jupyter kernels'

      # At the time of writing, when running all the tests, storage space was being exceed
      # so this skips the `codec-*` tests.
      - script: |
          set -e
          cd rust
          cargo test  --workspace --exclude "codec-*"
        condition: contains(variables.changed, 'rust')
        displayName: 'Rust: Test'

      - task: DownloadSecureFile@1
        name: certificate
        displayName: 'Install code signing certificate'
        inputs:
          secureFile: 'SectigoCodeSigningCertificate.pfx'

      - script: |
          cargo list | grep --quiet strip || cargo install cargo-strip
          make -C rust build
          curl -sL --output signtool.exe https://raw.githubusercontent.com/StefanKert/azuredevops-codesigning-task/efbb9cca6911aa4542e13dd876d8c913df6ff25b/task/signtool.exe
          signtool.exe sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /f $(certificate.secureFilePath) /p $(WINDOWS_CODESIGN_PASSWORD) target/release/stencila.exe
          bash .ci/upload-release.sh target/release/stencila.exe stencila x86_64-pc-windows-msvc.zip
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'CLI: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

      - script: |
          make -C node build
          make -C desktop publish
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        displayName: 'Desktop: Build and publish'
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          SENTRY_DSN: $(SENTRY_DSN_DESKTOP)
          WINDOWS_CODESIGN_FILE: $(certificate.secureFilePath)
          WINDOWS_CODESIGN_PASSWORD: $(WINDOWS_CODESIGN_PASSWORD)

      - script: |
          sccache --stop-server
          cargo cache --autoclean
        condition: eq(variables.RUST_CACHING, 'true')
        continueOnError: true
        displayName: 'Rust: Clean cache'

  # Releases are only made if all three platform builds have succeeded and on the `master` branch.
  - job: Release
    dependsOn: [Linux, MacOS, Windows]
    condition: |
      and(
        in(dependencies.Linux.result, 'Succeeded', 'Skipped'),
        in(dependencies.MacOS.result, 'Succeeded', 'Skipped'),
        in(dependencies.Windows.result, 'Succeeded', 'Skipped'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          contains(dependencies.Changes.outputs['folders.changed'], 'docker')
        )
      )
    pool:
      vmImage: ubuntu-latest
    variables:
      HUSKY: 0
    steps:
      - script: |
          npm ci
          npx semantic-release
        displayName: Create a release (if necessary)
        env:
          GIT_AUTHOR_NAME: Stencila CI Bot
          GIT_AUTHOR_EMAIL: ci@stenci.la
          GIT_COMMITTER_NAME: Stencila CI Bot
          GIT_COMMITTER_EMAIL: ci@stenci.la
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Docker images are built on tags (i.e. after a Release job) or if there is a
  # change in the `docker` folder. It depends on Linux job to ensure that the latest
  # Linux `stencila` binary is available to install into the image.
  - job: Docker
    dependsOn: [Changes, Linux]
    condition: |
      and(
        in(dependencies.Linux.result, 'Succeeded', 'Skipped'),
        or(
          startsWith(variables['Build.SourceBranch'], 'refs/tags/'),
          contains(dependencies.Changes.outputs['folders.changed'], 'docker')
        )
      )
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine version

      - task: Docker@2
        displayName: Build and push stencila/stencila
        inputs:
          command: buildAndPush
          dockerfile: docker/stencila/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/stencila
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest

  # Themes are only built if there are changes in the `themes` folder
  # then only published once changes land on the `master` branch
  - job: Themes
    dependsOn: [Changes]
    condition: contains(dependencies.Changes.outputs['folders.changed'], 'themes')
    pool:
      vmImage: ubuntu-latest
    variables:
      CI: true
      isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
      npm_config_cache: $(Pipeline.Workspace)/.npm

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: 16.x
        displayName: Install Node.js

      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)
        displayName: Cache npm

      - script: make -C schema setup build

      - script: npm ci
        displayName: Install dependencies
        workingDirectory: themes

      - script: |
          npm run check:themes
          npm run lint
        displayName: Run linting
        workingDirectory: themes
        failOnStderr: true

      - task: Npm@1
        displayName: Run unit tests
        inputs:
          command: 'custom'
          customCommand: 'run -s test:unit -- --coverage --ci --reporters=default --reporters=jest-junit'
          workingDir: themes

      - script: bash <(curl -s https://codecov.io/bash)
        displayName: Report test coverage
        workingDirectory: themes
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        displayName: Upload test results to CI
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'junit.xml'
          failTaskOnFailedTests: true
          searchFolder: themes

      # - script: |
      #     npm run docs
      #     npm run test:visual
      #     npx percy upload test/screenshots/local
      #   displayName: Run visual regression tests
      #   workingDirectory: themes
      #   condition: and(ne(variables['SAUCE_ACCESS_KEY'], ''), ne(variables['PERCY_TOKEN'], ''), not(contains(variables['Build.SourceBranch'], 'renovate')))
      #   env:
      #     PERCY_TOKEN: $(PERCY_TOKEN)
      #     SAUCE_ACCESS_KEY: $(SAUCE_ACCESS_KEY)
      #     SAUCE_USERNAME: $(SAUCE_USERNAME)

      - script: npm run build
        condition: succeeded()
        workingDirectory: themes
        displayName: 'Build package'

  # Help site is only built if there are changes in the `help` folder
  # and only published on `master` branch
  - job: Help
    dependsOn: [Changes]
    condition: contains(dependencies.Changes.outputs['folders.changed'], 'help')
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          set -e
          sudo apt-get install pv asciinema
          cd help && npm ci
        displayName: Install dependencies

      - script: make -C help demos references build
        displayName: Build
        env:
          TERM: dumb

      - script: |
          set -e
          git config --global user.name "Stencila CI Bot"
          git config --global user.email "ci@stenci.la"
          echo "machine github.com login stencila-ci password ${GITHUB_TOKEN}" > ~/.netrc
          GIT_USER="stencila-ci" make -C help deploy
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        displayName: Publish
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
