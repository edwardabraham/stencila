trigger:
  branches:
    include:
      - master
      # Ensure that CI is triggered for tags to build and upload binaries
      - refs/tags/*

jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: cargo install cargo-audit cargo-strip cargo-tarpaulin
        displayName: Install Rust dev deps

      - script: make lint
        displayName: Run linting

      - script: make cover
        displayName: Run tests with coverage

      - script: bash <(curl -s https://codecov.io/bash)
        displayName: Upload coverage
        condition: succeeded()

      - script: cargo audit
        displayName: Run dependency audit

      - script: |
          set -e
          make build
          bash .ci/upload-release.sh target/release/stencila stencila x86_64-unknown-linux-gnu.tar.gz
        displayName: Build and upload binaries
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: MacOS
    pool:
      vmImage: macOS-latest
    steps:
      - script: cargo install cargo-strip
        displayName: Install Rust dev deps

      - script: make test
        displayName: Run tests

      - script: |
          set -e
          make build
          bash .ci/upload-release.sh target/release/stencila stencila x86_64-apple-darwin.tar.gz
        displayName: Build and upload binaries
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
      - script: cargo install cargo-strip
        displayName: Install Rust dev deps

      - script: make test
        displayName: Run tests

      - script: |
          set -e
          make build
          bash .ci/upload-release.sh target/release/stencila.exe stencila x86_64-pc-windows-msvc.zip
        displayName: Upload and upload binaries
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: Release
    dependsOn: [Linux, MacOS, Windows]
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          npm ci
          npx semantic-release
        displayName: Create a release (if necessary)
        env:
          GIT_AUTHOR_NAME: Stencila CI Bot
          GIT_AUTHOR_EMAIL: ci@stenci.la
          GIT_COMMITTER_NAME: Stencila CI Bot
          GIT_COMMITTER_EMAIL: ci@stenci.la
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: Help
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          set -e
          sudo apt-get install pv asciinema
          cd help && npm ci
        displayName: Install dependencies

      # Build on all branches, including PRs
      - script: |
          set -e
          make -C help demos
          make -C help build
        displayName: Build help site

      # Only deploy if build was successful and on master
      - script: |
          set -e
          git config --global user.name "Stencila CI Bot"
          git config --global user.email "ci@stenci.la"
          echo "machine github.com login stencila-ci password ${GITHUB_TOKEN}" > ~/.netrc
          GIT_USER="stencila-ci" make -C help deploy
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: Deploy help site
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: Images
    # Will only run once the Linux job has succeeded and uploaded binary
    dependsOn: [Linux]
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine version

      - task: Docker@2
        displayName: Build and push stencila/stencila
        inputs:
          command: buildAndPush
          dockerfile: docker/stencila/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/stencila
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest

      - task: Docker@2
        displayName: Build and push stencila/node
        inputs:
          command: buildAndPush
          dockerfile: docker/node/Dockerfile
          containerRegistry: DockerHub
          repository: stencila/node
          tags: |
            $(Build.BuildNumber)
            $(GitVersion.SemVer)
            latest
