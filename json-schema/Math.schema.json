{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/stencila/stencila/main/json-schema/Math.schema.json",
  "title": "Math",
  "@id": "stencila:Math",
  "extends": "Entity",
  "status": "stable",
  "description": "A mathematical variable or equation.",
  "$comment": "This is a base type for `MathFragment` and `MathBlock` and should not\nnormally be instantiated.\nThis type has a similar structure and purpose to `CodeStatic` which is a base type\nfor `CodeFragment`, `CodeBlock` etc.\n",
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The name of the type",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\nIt is extended with the titles of all descendant types during\nthe generation of schema.json files.\n",
      "type": "string",
      "enum": [
        "Math",
        "MathBlock",
        "MathFragment"
      ],
      "default": "Math",
      "from": "Entity"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "type": "string",
      "from": "Entity"
    },
    "mathLanguage": {
      "@id": "stencila:mathLanguage",
      "description": "The language used for the equation e.g tex, mathml, asciimath.",
      "type": "string",
      "from": "Math"
    },
    "code": {
      "@id": "stencila:code",
      "description": "The code of the equation in the `mathLanguage`.",
      "type": "string",
      "from": "Math"
    },
    "compileDigest": {
      "@id": "stencila:compileDigest",
      "description": "A digest of the `code` and `mathLanguage` used to avoid unnecessary transpilation to MathML",
      "$ref": "ExecutionDigest.schema.json",
      "from": "Math"
    },
    "errors": {
      "@id": "stencila:errors",
      "description": "Errors that occurred when parsing the math equation.",
      "$comment": "This property is an array of strings. Compare this to `CodeChunk.errors`\nwhich is an array of `CodeError` nodes. Strings are considered to\nbe sufficient for math parsing errors which usually won't have stack traces,\nline numbers etc.\n",
      "type": "array",
      "items": {
        "type": "string"
      },
      "from": "Math",
      "isArray": true,
      "isPlural": true,
      "aliases": [
        "error"
      ]
    },
    "mathml": {
      "@id": "stencila:mathml",
      "description": "The MathML transpiled from the `code`",
      "type": "string",
      "from": "Math"
    }
  },
  "required": [
    "type",
    "mathLanguage",
    "code"
  ],
  "source": "https://github.com/stencila/stencila/blob/main/schema/yaml/Math.yaml",
  "children": [
    "MathBlock",
    "MathFragment"
  ],
  "descendants": [
    "MathBlock",
    "MathFragment"
  ],
  "type": "object",
  "propertyAliases": {
    "error": "errors"
  },
  "additionalProperties": false
}