{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/stencila/stencila/main/json-schema/Parameter.schema.json",
  "title": "Parameter",
  "@id": "stencila:Parameter",
  "extends": "Executable",
  "status": "unstable",
  "description": "A parameter of a document.",
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The name of the type",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\nIt is extended with the titles of all descendant types during\nthe generation of schema.json files.\n",
      "type": "string",
      "enum": [
        "Parameter",
        "CallArgument"
      ],
      "default": "Parameter",
      "from": "Entity"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "type": "string",
      "from": "Entity"
    },
    "executionAuto": {
      "@id": "stencila:executionAuto",
      "description": "Under which circumstances the code should be automatically executed.",
      "$ref": "ExecutionAuto.schema.json",
      "from": "Executable"
    },
    "compileDigest": {
      "@id": "stencila:compileDigest",
      "description": "A digest of the content, semantics and dependencies of the node.",
      "$ref": "ExecutionDigest.schema.json",
      "from": "Executable"
    },
    "executeDigest": {
      "@id": "stencila:executeDigest",
      "description": "The `compileDigest` of the node when it was last executed.",
      "$ref": "ExecutionDigest.schema.json",
      "from": "Executable"
    },
    "executionDependencies": {
      "@id": "stencila:executionDependencies",
      "description": "The upstream dependencies of this node.",
      "type": "array",
      "items": {
        "$ref": "ExecutionDependency.schema.json"
      },
      "from": "Executable",
      "isArray": true,
      "isPlural": true,
      "aliases": [
        "executionDependencie"
      ]
    },
    "executionDependents": {
      "@id": "stencila:executionDependents",
      "description": "The downstream dependents of this node.",
      "type": "array",
      "items": {
        "$ref": "ExecutionDependent.schema.json"
      },
      "from": "Executable",
      "isArray": true,
      "isPlural": true,
      "aliases": [
        "executionDependent"
      ]
    },
    "executionTags": {
      "@id": "stencila:executionTags",
      "description": "Tags in the code which affect its execution",
      "type": "array",
      "items": {
        "$ref": "ExecutionTag.schema.json"
      },
      "from": "Executable",
      "isArray": true,
      "isPlural": true,
      "aliases": [
        "executionTag"
      ]
    },
    "executionCount": {
      "@id": "stencila:executionCount",
      "description": "A count of the number of times that the node has been executed.",
      "type": "integer",
      "minimum": 0,
      "$comment": "Intended to increment with each successive execution of the node, including across sessions.\nNote that this differs to the `execution_count` in Jupyter Notebook format which is\nthe \"code cell's prompt number\" and which resets at the start of each new session.\n",
      "from": "Executable"
    },
    "executionRequired": {
      "@id": "stencila:executionRequired",
      "description": "Whether, and why, the code requires execution or re-execution.",
      "$ref": "ExecutionRequired.schema.json",
      "from": "Executable"
    },
    "executionKernel": {
      "@id": "stencila:executionKernel",
      "description": "The id of the kernel that the node was last executed in.",
      "type": "string",
      "from": "Executable"
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "description": "Status of the most recent, including any current, execution.",
      "$ref": "ExecutionStatus.schema.json",
      "from": "Executable"
    },
    "executionEnded": {
      "@id": "stencila:executionEnded",
      "description": "The timestamp when the last execution ended.",
      "$ref": "Timestamp.schema.json",
      "from": "Executable"
    },
    "executionDuration": {
      "@id": "stencila:executionDuration",
      "description": "Duration of the last execution.",
      "$ref": "Duration.schema.json",
      "from": "Executable"
    },
    "errors": {
      "@id": "stencila:errors",
      "description": "Errors when compiling (e.g. syntax errors) or executing the node.",
      "type": "array",
      "items": {
        "$ref": "CodeError.schema.json"
      },
      "from": "Executable",
      "isArray": true,
      "isPlural": true,
      "aliases": [
        "error"
      ]
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the parameter.",
      "type": "string",
      "pattern": "[a-zA-Z][a-zA-Z0-9_]*",
      "$comment": "This regex allows for snake_case and camelCase names but excludes\nPascalCase for names.\n",
      "from": "Parameter"
    },
    "label": {
      "@id": "stencila:label",
      "description": "A short label for the parameter.",
      "type": "string",
      "from": "Parameter"
    },
    "value": {
      "@id": "schema:value",
      "description": "The current value of the parameter.",
      "allOf": [
        {
          "$ref": "Node.schema.json"
        }
      ],
      "from": "Parameter"
    },
    "default": {
      "@id": "schema:defaultValue",
      "description": "The default value of the parameter.",
      "allOf": [
        {
          "$ref": "Node.schema.json"
        }
      ],
      "from": "Parameter"
    },
    "validator": {
      "@id": "stencila:validator",
      "description": "The validator that the value is validated against.",
      "allOf": [
        {
          "$ref": "ValidatorTypes.schema.json"
        }
      ],
      "from": "Parameter"
    },
    "hidden": {
      "@id": "stencila:hidden",
      "description": "Whether the parameter should be hidden.",
      "type": "boolean",
      "default": false,
      "$comment": "For HTML renderings of a document it is often desirable to hide parameters of a\ndocument that are already represented in the URL of the document.\n",
      "from": "Parameter"
    },
    "derivedFrom": {
      "@id": "stencila:derivedFrom",
      "description": "The dotted path to the object (e.g. a database table column) that the parameter should be derived from",
      "type": "string",
      "from": "Parameter"
    }
  },
  "required": [
    "type",
    "name"
  ],
  "source": "https://github.com/stencila/stencila/blob/main/schema/yaml/Parameter.yaml",
  "children": [
    "CallArgument"
  ],
  "descendants": [
    "CallArgument"
  ],
  "type": "object",
  "additionalProperties": false,
  "propertyAliases": {
    "executionDependencie": "executionDependencies",
    "executionDependent": "executionDependents",
    "executionTag": "executionTags",
    "error": "errors"
  }
}