# Workflow for creating releases
#
# At present, a release is triggered when a

name: Release

on:
  push:
    tags:
      - v*

env:
  RUST_VERSION: "1.71.0"
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  # Create a draft release
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release
        run: gh release create ${{ github.ref_name }} --title ${{ github.ref_name }} --draft

  # Build and upload CLI
  build-cli:
    needs: [create-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.xz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.xz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.xz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build and archive CLI
        run: make -C rust build archive -e TARGET=${{ matrix.target }}

      - name: Upload archive
        run: gh release upload ${{ github.ref_name }} target/cli-${{ github.ref_name }}-${{ matrix.target }}.${{ matrix.ext }}

  # Build and publish @stencila/types package
  release-typescript:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and NPM
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Release @stencila/types
        run: make -C typescript -B install release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build and upload Node.js binary addons
  build-node:
    needs: [create-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build and archive CLI
        run: make -C node -B install build

      - name: Upload archive
        run: gh release upload ${{ github.ref_name }} node/stencila.*.node

  # Build Python SDK
  # Based on https://github.com/messense/py-dissimilar/blob/main/.github/workflows/CI.yml
  build-python:
    needs: [create-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x64
            interpreter: 3.9 3.10 3.11
          - os: macos-latest
            target: x64
            interpreter: 3.9 3.10 3.11
          - os: windows-latest
            target: x64
            interpreter: 3.9 3.10 3.11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.target }}

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          working-directory: python
          target: ${{ matrix.target }}
          # Test changes to these args using the `build` recipe in the `python/Makefile`
          args: --release --out dist --sdist -i ${{ matrix.interpreter }}

      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # Upload Python wheels
  upload-python:
    needs: [build-python]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *

  # Build and push Docker image
  # Based on https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
  release-docker:
    needs: [create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            stencila/stencila
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Publish the draft release
  publish-release:
    needs: [build-cli]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mark release as non-draft
        run: |
          gh release edit ${{ github.ref_name }} --draft=false
