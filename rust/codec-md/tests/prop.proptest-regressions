# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 37f7412b2d93c275b2c66d509c520a32d821a334931c88f6b5c534cc896b28dd # shrinks to input = Article(Article { type_: Article, about: None, alternate_names: None, authors: None, comments: None, content: Some([QuoteBlock(QuoteBlock { type_: QuoteBlock, content: [Paragraph(Paragraph { type_: Paragraph, content: [String("string"), MathFragment(MathFragment { type_: MathFragment, text: "E = mc^{2}", errors: None, id: None, math_language: None }), String("string")], id: None })], cite: None, id: None })]), date_accepted: None, date_created: None, date_modified: None, date_published: None, date_received: None, description: None, editors: None, funded_by: None, funders: None, genre: None, id: None, identifiers: None, images: None, is_part_of: None, keywords: None, licenses: None, maintainers: None, name: None, page_end: None, page_start: None, pagination: None, parts: None, publisher: None, references: None, text: None, title: None, url: None, version: None })
cc 5f807f9f48dde2499a1d098f282d68922f24dbd03a4dc6bd836d3b92a4d4fd97 # shrinks to input = Article(Article { type_: Article, about: None, alternate_names: None, authors: None, comments: None, content: Some([Paragraph(Paragraph { type_: Paragraph, content: [String("string"), Parameter(Parameter { type_: Parameter, name: "name", code_dependencies: None, code_dependents: None, compile_digest: None, default: Some(Number(Number(0.0))), errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, hidden: None, id: None, validator: Some(NumberValidator(NumberValidator { type_: NumberValidator, exclusive_maximum: None, exclusive_minimum: None, id: None, maximum: None, minimum: None, multiple_of: None })), value: None }), String("string")], id: None })]), date_accepted: None, date_created: None, date_modified: None, date_published: None, date_received: None, description: None, editors: None, funded_by: None, funders: None, genre: None, id: None, identifiers: None, images: None, is_part_of: None, keywords: None, licenses: None, maintainers: None, name: None, page_end: None, page_start: None, pagination: None, parts: None, publisher: None, references: None, text: None, title: None, url: None, version: None })
cc 7a17194f26d03c94dd0d0da9bb4d5c28140e561e09a0bca748736aa1bcc0febf # shrinks to input = Article(Article { type_: Article, about: None, alternate_names: None, authors: None, comments: None, content: Some([Form(Form { type_: Form, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [Division(Division { type_: Division, classes: [], content: [Form(Form { type_: Form, content: [For(For { type_: For, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Call(Call { type_: Call, source: "somefile.fmt", arguments: None, code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, select: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Division(Division { type_: Division, classes: [], content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [Call(Call { type_: Call, source: "somefile.fmt", arguments: None, code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, select: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([Division(Division { type_: Division, classes: [], content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Division(Division { type_: Division, classes: [], content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Call(Call { type_: Call, source: "somefile.fmt", arguments: None, code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, select: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Form(Form { type_: Form, content: [Division(Division { type_: Division, classes: [], content: [List(List { type_: List, items: [ListItem { type_: ListItem, alternate_names: None, content: Some(VecBlockContent([Paragraph(Paragraph { type_: Paragraph, content: [String("string"), ImageObject(ImageObjectSimple { type_: ImageObject, content_url: "url.png", bitrate: None, caption: None, content_size: None, embed_url: None, id: None, media_type: None, thumbnail: None, title: None }), String("string")], id: None })])), description: None, id: None, identifiers: None, images: None, is_checked: None, item: None, name: None, position: None, url: None }], id: None, order: Some(Ascending) })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Form(Form { type_: Form, content: [Heading(Heading { type_: Heading, content: [String("string")], depth: Some(5), id: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([Division(Division { type_: Division, classes: [], content: [For(For { type_: For, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [MathBlock(MathBlock { type_: MathBlock, text: "E = mc^{2}", errors: None, id: None, label: None, math_language: Some("tex") })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })]) })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([For(For { type_: For, content: [CodeBlock(CodeBlock { type_: CodeBlock, text: "text", id: None, media_type: None, programming_language: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([For(For { type_: For, content: [MathBlock(MathBlock { type_: MathBlock, text: "E = mc^{2}", errors: None, id: None, label: None, math_language: Some("tex") })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [List(List { type_: List, items: [ListItem { type_: ListItem, alternate_names: None, content: Some(VecBlockContent([Paragraph(Paragraph { type_: Paragraph, content: [String("string"), Superscript(Superscript { type_: Superscript, content: [String("string")], id: None }), String("string")], id: None })])), description: None, id: None, identifiers: None, images: None, is_checked: None, item: None, name: None, position: None, url: None }], id: None, order: Some(Ascending) })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([Division(Division { type_: Division, classes: [], content: [Call(Call { type_: Call, source: "somefile.fmt", arguments: None, code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, select: None })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })]) })]) })]) })]) })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([List(List { type_: List, items: [ListItem { type_: ListItem, alternate_names: None, content: Some(VecBlockContent([Paragraph(Paragraph { type_: Paragraph, content: [String("string "), Strikeout(Strikeout { type_: Strikeout, content: [String("string")], id: None }), String(" string")], id: None })])), description: None, id: None, identifiers: None, images: None, is_checked: None, item: None, name: None, position: None, url: None }], id: None, order: Some(Unordered) })]) })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Include(Include { type_: Include, source: "somefile.fmt", code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, select: Some("query") })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [Form(Form { type_: Form, content: [Paragraph(Paragraph { type_: Paragraph, content: [String("string "), Emphasis(Emphasis { type_: Emphasis, content: [String("string")], id: None }), String(" string")], id: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([Paragraph(Paragraph { type_: Paragraph, content: [String("string "), Emphasis(Emphasis { type_: Emphasis, content: [String("string")], id: None }), String(" string")], id: None })]) })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [List(List { type_: List, items: [ListItem { type_: ListItem, alternate_names: None, content: Some(VecBlockContent([Paragraph(Paragraph { type_: Paragraph, content: [String("string"), Underline(Underline { type_: Underline, content: [String("string")], id: None }), String("string")], id: None })])), description: None, id: None, identifiers: None, images: None, is_checked: None, item: None, name: None, position: None, url: None }], id: None, order: Some(Ascending) })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Form(Form { type_: Form, content: [Form(Form { type_: Form, content: [For(For { type_: For, content: [Heading(Heading { type_: Heading, content: [String("string")], depth: Some(1), id: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })]) })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [MathBlock(MathBlock { type_: MathBlock, text: "E = mc^{2}", errors: None, id: None, label: None, math_language: Some("tex") })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Form(Form { type_: Form, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [For(For { type_: For, content: [Call(Call { type_: Call, source: "somefile.fmt", arguments: None, code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: Some("fmt"), select: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Heading(Heading { type_: Heading, content: [String("string")], depth: Some(1), id: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([Table(TableSimple { type_: Table, rows: [TableRow { type_: TableRow, cells: [TableCell { type_: TableCell, cell_type: Some(Header), colspan: None, content: Some(VecInlineContent([String("string")])), id: None, name: None, rowspan: None }], id: None, row_type: Some(Header) }, TableRow { type_: TableRow, cells: [TableCell { type_: TableCell, cell_type: None, colspan: None, content: Some(VecInlineContent([String("string")])), id: None, name: None, rowspan: None }], id: None, row_type: None }], caption: None, id: None, label: None })]) })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Paragraph(Paragraph { type_: Paragraph, content: [String("string"), Link(Link { type_: Link, content: [String("string")], target: "target", export_from: None, id: None, import_to: None, relation: None, title: None }), String("string")], id: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Table(TableSimple { type_: Table, rows: [TableRow { type_: TableRow, cells: [TableCell { type_: TableCell, cell_type: Some(Header), colspan: None, content: Some(VecInlineContent([String("string")])), id: None, name: None, rowspan: None }], id: None, row_type: Some(Header) }, TableRow { type_: TableRow, cells: [TableCell { type_: TableCell, cell_type: None, colspan: None, content: Some(VecInlineContent([String("string")])), id: None, name: None, rowspan: None }], id: None, row_type: None }], caption: None, id: None, label: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Include(Include { type_: Include, source: "somefile.fmt", code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: Some("fmt"), select: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([QuoteBlock(QuoteBlock { type_: QuoteBlock, content: [Paragraph(Paragraph { type_: Paragraph, content: [String("string"), Subscript(Subscript { type_: Subscript, content: [String("string")], id: None }), String("string")], id: None })], cite: None, id: None })]) })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Form(Form { type_: Form, content: [If(If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Heading(Heading { type_: Heading, content: [String("string")], depth: Some(5), id: None })], alternatives: Some([If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Table(TableSimple { type_: Table, rows: [TableRow { type_: TableRow, cells: [TableCell { type_: TableCell, cell_type: Some(Header), colspan: None, content: Some(VecInlineContent([String("string")])), id: None, name: None, rowspan: None }], id: None, row_type: Some(Header) }, TableRow { type_: TableRow, cells: [TableCell { type_: TableCell, cell_type: None, colspan: None, content: Some(VecInlineContent([String("string")])), id: None, name: None, rowspan: None }], id: None, row_type: None }], caption: None, id: None, label: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [CodeBlock(CodeBlock { type_: CodeBlock, text: "text", id: None, media_type: None, programming_language: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [Call(Call { type_: Call, source: "somefile.fmt", arguments: None, code_dependencies: None, code_dependents: None, compile_digest: None, content: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, select: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }, If { type_: If, condition: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, content: [CodeBlock(CodeBlock { type_: CodeBlock, text: "text", id: None, media_type: None, programming_language: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None }]), code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: Some([QuoteBlock(QuoteBlock { type_: QuoteBlock, content: [Paragraph(Paragraph { type_: Paragraph, content: [String("string"), CodeExpression(CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }), String("string")], id: None })], cite: None, id: None })]) })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })], css: "", programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None })], expression: CodeExpression { type_: CodeExpression, programming_language: "python", text: "text", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, media_type: None, output: None }, symbol: "item", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], alternatives: None, code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, otherwise: None })], code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None })]), date_accepted: None, date_created: None, date_modified: None, date_published: None, date_received: None, description: None, editors: None, funded_by: None, funders: None, genre: None, id: None, identifiers: None, images: None, is_part_of: None, keywords: None, licenses: None, maintainers: None, name: None, page_end: None, page_start: None, pagination: None, parts: None, publisher: None, references: None, text: None, title: None, url: None, version: None })
cc 038ff373d3829ff6ffdb5be8bba147cf8c317ad9586a1c9fd5bc625f76d5d1cf # shrinks to input = Article(Article { type_: Article, about: None, alternate_names: None, authors: None, comments: None, content: Some([Paragraph(Paragraph { type_: Paragraph, content: [String("string"), Button(Button { type_: Button, name: "name", code_dependencies: None, code_dependents: None, compile_digest: None, errors: None, execute_auto: None, execute_count: None, execute_digest: None, execute_duration: None, execute_ended: None, execute_kernel: None, execute_required: None, execute_status: None, id: None, label: None }), String("string")], id: None })]), date_accepted: None, date_created: None, date_modified: None, date_published: None, date_received: None, description: None, editors: None, funded_by: None, funders: None, genre: None, id: None, identifiers: None, images: None, is_part_of: None, keywords: None, licenses: None, maintainers: None, name: None, page_end: None, page_start: None, pagination: None, parts: None, publisher: None, references: None, text: None, title: None, url: None, version: None })
