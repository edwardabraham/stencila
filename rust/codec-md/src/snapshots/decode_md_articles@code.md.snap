---
source: rust/codec-md/src/decode.rs
assertion_line: 2407
expression: "decode(content).expect(\"Unable to decode Markdown\")"
input_file: fixtures/articles/code.md
---
{
  "type": "Article",
  "content": [
    {
      "type": "Paragraph",
      "content": [
        "This article fixture is focussed on the Markdown representation of executable code nodes such as ",
        {
          "type": "CodeFragment",
          "code": "CodeChunk"
        },
        ", ",
        {
          "type": "CodeFragment",
          "code": "CodeExpression"
        },
        ", and ",
        {
          "type": "CodeFragment",
          "code": "Parameter"
        },
        " nodes. See also ",
        {
          "type": "CodeFragment",
          "code": "../fragments/md/code-*.md"
        },
        " fixtures. This fixture intentionally does not have any relations between code nodes (e.g a variable assigned in one, used in another)."
      ]
    },
    {
      "type": "Heading",
      "content": [
        "Inline code"
      ],
      "depth": 2
    },
    {
      "type": "Paragraph",
      "content": [
        "Code expressions have a language and the ",
        {
          "type": "CodeFragment",
          "code": "exec"
        },
        " keyword in curly braces, like this ",
        {
          "type": "CodeExpression",
          "code": "1+1",
          "programmingLanguage": "r"
        },
        " and this ",
        {
          "type": "CodeExpression",
          "code": "2+2",
          "programmingLanguage": "python"
        },
        ". The language may be omitted e.g. ",
        {
          "type": "CodeExpression",
          "code": "3+3",
          "programmingLanguage": ""
        },
        " (in which case it will default to the language of the previous code element)."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "Double brace syntax is also supported, but generally not recommended e.g. ",
        {
          "type": "CodeExpression",
          "code": "2+3",
          "programmingLanguage": "python"
        },
        " an ",
        {
          "type": "CodeExpression",
          "code": "4+5",
          "programmingLanguage": ""
        },
        "."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "Non-executable code fragments, lack the ",
        {
          "type": "CodeFragment",
          "code": "exec"
        },
        " keyword but can have a language e.g. ",
        {
          "type": "CodeFragment",
          "code": "3+3",
          "programmingLanguage": "r"
        },
        "."
      ]
    },
    {
      "type": "Heading",
      "content": [
        "Block code"
      ],
      "depth": 2
    },
    {
      "type": "Paragraph",
      "content": [
        "Code chunk use the ",
        {
          "type": "CodeFragment",
          "code": "exec"
        },
        " keyword to differentiate them from code blocks,"
      ]
    },
    {
      "type": "CodeChunk",
      "code": "\"Hello from R\"",
      "programmingLanguage": "r"
    },
    {
      "type": "Paragraph",
      "content": [
        "Non executable code blocks do not have the ",
        {
          "type": "CodeFragment",
          "code": "exec"
        },
        " keyword,"
      ]
    },
    {
      "type": "CodeBlock",
      "code": "# Not executed",
      "programmingLanguage": "python"
    }
  ]
}
