---
source: rust/codec-md/src/decode.rs
assertion_line: 1354
expression: "decode_fragment(content, None)"
input_file: fixtures/fragments/md/parameter.md
---
[
  {
    "type": "Paragraph",
    "content": [
      "A parameter can be represented in Markdown using a pair of forward slashes and optionally, curly braces defining options."
    ]
  },
  {
    "type": "Paragraph",
    "content": [
      "Boolean parameters ",
      {
        "type": "Parameter",
        "name": "par1",
        "default": true,
        "validator": {
          "type": "BooleanValidator"
        }
      },
      " and ",
      {
        "type": "Parameter",
        "name": "par2",
        "default": false,
        "validator": {
          "type": "BooleanValidator"
        }
      },
      "."
    ]
  },
  {
    "type": "Paragraph",
    "content": [
      "Integer parameters ",
      {
        "type": "Parameter",
        "name": "parA",
        "default": 2,
        "validator": {
          "type": "IntegerValidator",
          "maximum": 100.0,
          "minimum": 1.0,
          "multipleOf": 2.0
        }
      },
      " and ",
      {
        "type": "Parameter",
        "name": "parB",
        "default": 42,
        "validator": {
          "type": "IntegerValidator",
          "maximum": 100.0
        }
      },
      "."
    ]
  },
  {
    "type": "Paragraph",
    "content": [
      "Number parameters ",
      {
        "type": "Parameter",
        "name": "par3",
        "default": 22,
        "validator": {
          "type": "NumberValidator",
          "maximum": 100.0,
          "minimum": 1.0,
          "multipleOf": 2.0
        }
      },
      " and ",
      {
        "type": "Parameter",
        "name": "par4",
        "default": 3.0,
        "validator": {
          "type": "NumberValidator",
          "maximum": 4.0,
          "minimum": -1.0
        }
      },
      "."
    ]
  },
  {
    "type": "Paragraph",
    "content": [
      "String parameters ",
      {
        "type": "Parameter",
        "name": "par5",
        "validator": {
          "type": "StringValidator",
          "maxLength": 100,
          "minLength": 1
        }
      },
      " and ",
      {
        "type": "Parameter",
        "name": "par6",
        "validator": {
          "type": "StringValidator",
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[A-Za-z ]+"
        }
      },
      "."
    ]
  },
  {
    "type": "Paragraph",
    "content": [
      "For enum parameters set the ",
      {
        "type": "CodeFragment",
        "text": "values"
      },
      " property using a JSON5 array e.g. ",
      {
        "type": "Parameter",
        "name": "par7",
        "validator": {
          "type": "EnumValidator",
          "values": [
            "One option",
            "Another option"
          ]
        }
      },
      " (allows for spaces in values) or using a comma separated string e.g. ",
      {
        "type": "Parameter",
        "name": "par8",
        "validator": {
          "type": "EnumValidator",
          "values": [
            "A",
            "B",
            "C",
            "D"
          ]
        }
      },
      ". Note that when using JSON/5 for values they can be any type, not just strings e.g. ",
      {
        "type": "Parameter",
        "name": "par9",
        "validator": {
          "type": "EnumValidator",
          "values": [
            1,
            "two",
            3.14
          ]
        }
      },
      "."
    ]
  },
  {
    "type": "Paragraph",
    "content": [
      "When there is no ",
      {
        "type": "CodeFragment",
        "text": "type"
      },
      " option, parameters will have no validator ",
      {
        "type": "Parameter",
        "name": "par10"
      },
      ". The curly braces are required to avoid forward slash file paths e.g. /some/path, /another/path/ being parsed as parameters."
    ]
  }
]
