---
source: rust/codec-md/src/decode.rs
assertion_line: 2407
expression: "decode(content).expect(\"Unable to decode Markdown\")"
input_file: fixtures/articles/code-relations.md
---
{
  "type": "Article",
  "content": [
    {
      "type": "Paragraph",
      "content": [
        "This fixture is focussed on dependency relations between ",
        {
          "type": "CodeFragment",
          "code": "CodeChunk"
        },
        ", ",
        {
          "type": "CodeFragment",
          "code": "CodeExpression"
        },
        " and ",
        {
          "type": "CodeFragment",
          "code": "Parameter"
        },
        " nodes within a document. Relations are established by assignment and usage of variables. For simplicity, it only uses ",
        {
          "type": "CodeFragment",
          "code": "Calc"
        },
        " as a language in code nodes."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "A ",
        {
          "type": "CodeFragment",
          "code": "CodeChunk"
        },
        " that assigns a variable ",
        {
          "type": "CodeFragment",
          "code": "a"
        },
        ", and which is always autorun when downstream dependents are run. When manual testing you may wish to set ",
        {
          "type": "CodeFragment",
          "code": "a = now()"
        },
        " to see the effect of this (for deterministic test snapshots this is not done by default)."
      ]
    },
    {
      "type": "CodeChunk",
      "code": "# @autorun always\na = 1\na",
      "programmingLanguage": "calc"
    },
    {
      "type": "Paragraph",
      "content": [
        "Another chunk that uses ",
        {
          "type": "CodeFragment",
          "code": "a"
        },
        ":"
      ]
    },
    {
      "type": "CodeChunk",
      "code": "a * 2",
      "programmingLanguage": "calc"
    },
    {
      "type": "Paragraph",
      "content": [
        "and some ",
        {
          "type": "CodeFragment",
          "code": "CodeExpression"
        },
        "s that also use it: ",
        {
          "type": "CodeExpression",
          "code": "a * 3",
          "programmingLanguage": "calc"
        },
        " and ",
        {
          "type": "CodeExpression",
          "code": "a * 4",
          "programmingLanguage": "calc"
        },
        "."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "A chunk that derives another variable ",
        {
          "type": "CodeFragment",
          "code": "b"
        },
        " from ",
        {
          "type": "CodeFragment",
          "code": "a"
        },
        " and never gets autorun (must be explicitly run):"
      ]
    },
    {
      "type": "CodeChunk",
      "code": "# @autorun never\nb = a + 1\nb",
      "programmingLanguage": "calc"
    },
    {
      "type": "Paragraph",
      "content": [
        "and some expressions that also use it: ",
        {
          "type": "CodeExpression",
          "code": "b * 1",
          "programmingLanguage": "calc"
        },
        " and ",
        {
          "type": "CodeExpression",
          "code": "b * 2",
          "programmingLanguage": "calc"
        },
        "."
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "A ",
        {
          "type": "CodeFragment",
          "code": "Parameter"
        },
        " that sets a third symbol ",
        {
          "type": "CodeFragment",
          "code": "c"
        },
        " : ",
        {
          "type": "Parameter",
          "name": "c",
          "default": 1,
          "validator": {
            "type": "NumberValidator",
            "maximum": 10.0,
            "minimum": 0.0
          }
        }
      ]
    },
    {
      "type": "Paragraph",
      "content": [
        "And a code chunk that uses all three variables:"
      ]
    },
    {
      "type": "CodeChunk",
      "code": "a + b + c",
      "programmingLanguage": "calc"
    }
  ]
}
