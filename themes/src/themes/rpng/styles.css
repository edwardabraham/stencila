@import '../../extensions/cite-apa/styles.css';
@import '../../extensions/math/styles.css';

/* stylelint-disable scale-unlimited/declaration-strict-value, xi/selector-pattern */

:--root {
  --color-parameter: hsl(50deg 80% 70%);
  --color-code: hsl(100deg 80% 70%);
  --color-math: hsl(200deg 80% 70%);
  --color-include: hsl(270deg 80% 70%);
  --color-call: hsl(320deg 80% 70%);

  /* Use system UI font an 10pt so <input> and <select> text of Parameters is same font as outputs
  of CodeChunk and CodeExpressions */
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  font-size: 10pt;
}

:--CodeChunk,
:--CodeExpression,
:--MathBlock,
:--MathFragment,
:--Parameter,
:--Include,
:--Call {
  display: inline-block;
  margin: 0 !important;
  min-width: 19px;
  min-height: 19px;
  overflow: visible;
  position: relative;
  width: auto !important;
  border: none;

  &::before {
    background-position: center;
    background-repeat: no-repeat;
    border-radius: 2px;
    color: #444;
    font-family: 'Courier New', Courier, monospace;
    font-size: 11px;
    padding: 5px 3px 3px;
    height: 13px;
    width: 13px;
    left: 0;
    top: 0;
    z-index: 1;
    content: '';
    pointer-events: none;
    position: absolute;
  }
}

:--CodeChunk {
  /* Indicator */
  &::before {
    background-color: var(--color-code);
    content: 'CC';
  }

  /* Hide code etc */
  [slot='text'],
  [slot='code-dependencies'],
  [slot='code-dependents'] {
    display: none !important;
  }

  /* Push outputs and errors down so indicator does not overlap them */
  [slot='outputs'],
  [slot='errors'] {
    margin: 21px 0 0 !important;
  }

  /* Avoid elements taking up vertical space unnecessarily */
  [slot='outputs']:empty,
  [slot='errors']:empty,
  [slot='label']:empty,
  [slot='caption']:empty {
    display: none;
  }

  /* Scale the whole element so that it it can be screen-shotted with a 
  times two scaling factor and maintain size. This is necessary for "reconstituting"
  image outputs from "data:self" dataURIs (see Rust code).
  WARNING: Avoid changing padding, margins etc as current values are taken into account
  for cropping in this reconstitution process.
  */
  transform: scale(0.5);
}

:--CodeExpression {
  /* Indicator */
  &::before {
    background-color: var(--color-code);
    content: 'CE';
  }

  /* Hide code etc */
  [slot='text'],
  [slot='code-dependencies'] {
    display: none !important;
  }

  /* Push output and errors right so indicator does not overlap them */
  [slot='output'],
  [slot='errors'] {
    margin: 0 0 0 21px !important;
  }

  /* Avoid elements taking up vertical space unnecessarily */
  [slot='outputs']:empty,
  [slot='errors']:empty {
    display: none;
  }

  /* Force output to be inline */
  [slot='output'] * {
    display: inline;
  }

  /* Vertically centre the output */
  [slot='output'] {
    padding: 2px 2px 1px 0;
    display: flex;
  }
}

:--MathBlock {
  /* Indicator */
  &::before {
    background-color: var(--color-math);
    content: 'MB';
  }

  /* Hide math "code" */
  [slot='text'] {
    display: none !important;
  }

  /* Push math (pre fallback) down so indicator does not overlap it and give some space */
  math,
  pre {
    margin: 21px 0 0 !important;
    padding: 2px;
  }
}

:--MathFragment {
  /* Indicator */
  &::before {
    background-color: var(--color-math);
    content: 'MF';
  }

  /* Hide math "code" */
  [slot='text'] {
    display: none !important;
  }

  /* Push math (span fallback) right so indicator does not overlap it */
  math,
  span {
    margin: 0 0 0 21px !important;
  }
}

:--Parameter {
  /* Indicator */
  &::before {
    background-color: var(--color-parameter);
    content: 'PA';
  }

  /* Hide parameter name */
  :--name,
  [slot='name'] {
    display: none !important;
  }

  /* Push <input>/<select> right so that the indicator does not overlap it,
  and remove borders */
  input,
  select {
    margin: 0 0 0 21px !important;
    border: none;
  }

  /* Hide number <input> "spin" arrows */
  input[type='number'] {
    appearance: textfield;
  }

  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    appearance: none;
  }

  /* Hide <select> background and dropdown */
  select {
    background: none;
    appearance: none;
  }
}

/* Code chunk outputs */

:--ImageObject {
  max-width: 100%;
  height: auto;
}

:--Datatable {
  table,
  tr,
  th,
  td {
    border-collapse: collapse;
  }

  th {
    color: var(--color-neutral-600);
    background: rgb(0 0 0 / 0.1);
  }

  th,
  td {
    padding: 0.5em;
    border: 1px solid lightgrey;
  }
}

:--Include {
  /* Indicator */
  &::before {
    background-color: var(--color-include);
    content: 'IN';
  }

  /* Hide content */
  [slot='content'] {
    display: none !important;
  }
}

:--Call {
  /* Indicator */
  &::before {
    background-color: var(--color-call);
    content: 'CA';
  }

  /* Hide content */
  [slot='content'] {
    display: none !important;
  }
}
