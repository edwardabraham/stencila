{
  "$schema": "https://stencila.dev/meta.schema.json",
  "$id": "https://stencila.dev/DatatableColumn.schema.json",
  "@id": "stencila:DatatableColumn",
  "title": "DatatableColumn",
  "extends": [
    "Thing"
  ],
  "category": "data",
  "description": "A column of data within a Datatable.",
  "required": [
    "type",
    "name",
    "values"
  ],
  "core": [
    "id",
    "validator"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "id"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "alternateNames": {
      "@id": "schema:alternateName",
      "description": "Alternate names (aliases) for the item.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "@id": "schema:description",
      "description": "A description of the item.",
      "strip": [
        "types"
      ],
      "type": "array",
      "items": {
        "$ref": "Block.schema.json"
      }
    },
    "identifiers": {
      "@id": "schema:identifier",
      "description": "Any kind of identifier for any kind of Thing.",
      "$comment": "Some identifiers have specific properties e.g the `issn` property for\nthe `Periodical` type. These should be used in preference to this\nproperty which is intended for identifiers that do not yet have a\nspecific property. Identifiers can be represented as strings, but\nusing a `PropertyValue` will usually be better because it allows\nfor `propertyID` (i.e. the type of identifier).\n",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "PropertyValue.schema.json"
          },
          {
            "type": "string"
          }
        ]
      }
    },
    "images": {
      "@id": "schema:image",
      "description": "Images of the item.",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "ImageObject.schema.json"
          },
          {
            "type": "string",
            "format": "uri"
          }
        ]
      }
    },
    "name": {
      "@id": "schema:name",
      "description": "The name of the item.",
      "type": "string"
    },
    "url": {
      "@id": "schema:url",
      "description": "The URL of the item.",
      "type": "string",
      "format": "uri"
    },
    "values": {
      "@id": "stencila:values",
      "description": "The data values of the column.",
      "$comment": "Previously, any `Node` type was allowed in values. However, for some implementations\nthis was inefficient (e.g. in Rust a `enum Node` is >500 bytes whereas a `enum Primitive` is 32 bytes).\n",
      "type": "array",
      "items": {
        "$ref": "Primitive.schema.json"
      }
    },
    "validator": {
      "@id": "stencila:validator",
      "description": "The validator to use to validate data in the column.",
      "$ref": "ArrayValidator.schema.json"
    }
  }
}