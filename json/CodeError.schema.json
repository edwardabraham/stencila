{
  "$schema": "https://stencila.dev/meta.schema.json",
  "$id": "https://stencila.dev/CodeError.schema.json",
  "@id": "stencila:CodeError",
  "title": "CodeError",
  "extends": [
    "Entity"
  ],
  "description": "An error that occurred when parsing, compiling or executing a Code node.",
  "status": "unstable",
  "required": [
    "type",
    "errorMessage"
  ],
  "core": [
    "id",
    "errorType",
    "stackTrace"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "id"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "errorMessage": {
      "@id": "stencila:errorMessage",
      "description": "The error message or brief description of the error.",
      "aliases": [
        "message"
      ],
      "type": "string"
    },
    "errorType": {
      "@id": "stencila:errorType",
      "description": "The type of error e.g. \"SyntaxError\", \"ZeroDivisionError\".",
      "$comment": "Many languages have the concept of alternative types of errors.\nFor example, Python has various [classes of exceptions](https://docs.python.org/3/tutorial/errors.html).\nThis property is intended to be used for storing these type names as additional\ninformation that maybe useful to the user attempting to resolve the error.\n",
      "type": "string"
    },
    "stackTrace": {
      "@id": "stencila:stackTrace",
      "description": "Stack trace leading up to the error.",
      "aliases": [
        "trace"
      ],
      "type": "string"
    }
  }
}