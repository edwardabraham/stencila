{
  "$schema": "https://stencila.dev/meta.schema.json",
  "$id": "https://stencila.dev/Parameter.schema.json",
  "@id": "stencila:Parameter",
  "title": "Parameter",
  "extends": [
    "Executable"
  ],
  "category": "flow",
  "description": "A parameter of a document.",
  "status": "experimental",
  "html": {
    "elem": "span",
    "custom": true
  },
  "markdown": {
    "special": true
  },
  "required": [
    "type",
    "name"
  ],
  "core": [
    "id",
    "label",
    "value",
    "default",
    "validator"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "category": "other",
      "description": "The type of this item",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "category": "other",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "id"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "executionAuto": {
      "@id": "stencila:executionAuto",
      "category": "other",
      "description": "Under which circumstances the code should be automatically executed.",
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionAuto.schema.json"
    },
    "compilationDigest": {
      "@id": "stencila:compilationDigest",
      "category": "other",
      "description": "A digest of the content, semantics and dependencies of the node.",
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionDigest.schema.json"
    },
    "executionDigest": {
      "@id": "stencila:executionDigest",
      "category": "other",
      "description": "The `compileDigest` of the node when it was last executed.",
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionDigest.schema.json"
    },
    "executionDependencies": {
      "@id": "stencila:executionDependencies",
      "category": "other",
      "description": "The upstream dependencies of this node.",
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionDependency.schema.json"
      }
    },
    "executionDependants": {
      "@id": "stencila:executionDependants",
      "category": "other",
      "description": "The downstream dependants of this node.",
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionDependant.schema.json"
      }
    },
    "executionTags": {
      "@id": "stencila:executionTags",
      "category": "other",
      "description": "Tags in the code which affect its execution",
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "ExecutionTag.schema.json"
      }
    },
    "executionCount": {
      "@id": "stencila:executionCount",
      "category": "other",
      "description": "A count of the number of times that the node has been executed.",
      "$comment": "Intended to increment with each successive execution of the node, including across sessions.\nNote that this differs to the `execution_count` in Jupyter Notebook format which is\nthe \"code cell's prompt number\" and which resets at the start of each new session.\n",
      "strip": [
        "execution"
      ],
      "type": "integer",
      "minimum": 0.0
    },
    "executionRequired": {
      "@id": "stencila:executionRequired",
      "category": "other",
      "description": "Whether, and why, the code requires execution or re-execution.",
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionRequired.schema.json"
    },
    "executionKernel": {
      "@id": "stencila:executionKernel",
      "category": "other",
      "description": "The id of the kernel that the node was last executed in.",
      "strip": [
        "execution"
      ],
      "type": "string"
    },
    "executionStatus": {
      "@id": "stencila:executionStatus",
      "category": "other",
      "description": "Status of the most recent, including any current, execution.",
      "strip": [
        "execution"
      ],
      "$ref": "ExecutionStatus.schema.json"
    },
    "executionEnded": {
      "@id": "stencila:executionEnded",
      "category": "other",
      "description": "The timestamp when the last execution ended.",
      "strip": [
        "execution"
      ],
      "$ref": "Timestamp.schema.json"
    },
    "executionDuration": {
      "@id": "stencila:executionDuration",
      "category": "other",
      "description": "Duration of the last execution.",
      "strip": [
        "execution"
      ],
      "$ref": "Duration.schema.json"
    },
    "errors": {
      "@id": "stencila:errors",
      "category": "other",
      "description": "Errors when compiling (e.g. syntax errors) or executing the node.",
      "strip": [
        "execution"
      ],
      "type": "array",
      "items": {
        "$ref": "CodeError.schema.json"
      }
    },
    "name": {
      "@id": "schema:name",
      "category": "other",
      "description": "The name of the parameter.",
      "$comment": "This regex allows for snake_case and camelCase names but excludes\nPascalCase for names.\n",
      "type": "string",
      "pattern": "[a-zA-Z][a-zA-Z0-9_]*"
    },
    "label": {
      "@id": "stencila:label",
      "category": "other",
      "description": "A short label for the parameter.",
      "type": "string"
    },
    "value": {
      "@id": "schema:value",
      "category": "other",
      "description": "The current value of the parameter.",
      "$ref": "Node.schema.json"
    },
    "default": {
      "@id": "schema:defaultValue",
      "category": "other",
      "description": "The default value of the parameter.",
      "$ref": "Node.schema.json"
    },
    "validator": {
      "@id": "stencila:validator",
      "category": "other",
      "description": "The validator that the value is validated against.",
      "html": {
        "content": true
      },
      "$ref": "Validator.schema.json"
    },
    "hidden": {
      "@id": "stencila:hidden",
      "category": "other",
      "description": "Whether the parameter should be hidden.",
      "$comment": "For HTML renderings of a document it is often desirable to hide parameters of a\ndocument that are already represented in the URL of the document.\n",
      "type": "boolean"
    },
    "derivedFrom": {
      "@id": "stencila:derivedFrom",
      "category": "other",
      "description": "The dotted path to the object (e.g. a database table column) that the parameter should be derived from",
      "type": "string"
    }
  }
}