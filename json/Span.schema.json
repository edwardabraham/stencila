{
  "$schema": "https://stencila.dev/meta.schema.json",
  "$id": "https://stencila.dev/Span.schema.json",
  "@id": "stencila:Span",
  "title": "Span",
  "extends": [
    "Styled"
  ],
  "category": "style",
  "description": "Styled inline content",
  "status": "under-development",
  "html": {
    "elem": "span",
    "custom": true
  },
  "markdown": {
    "format": "[{content}]{{{code}}}"
  },
  "required": [
    "type",
    "code",
    "content"
  ],
  "core": [
    "id",
    "styleLanguage",
    "compileDigest",
    "errors",
    "css",
    "classes"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "id"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "code": {
      "@id": "stencila:code",
      "description": "The code of the equation in the `styleLanguage`.",
      "$ref": "Cord.schema.json"
    },
    "styleLanguage": {
      "@id": "stencila:styleLanguage",
      "description": "The language used for the style specification e.g. css, tailwind, classes.",
      "type": "string"
    },
    "compileDigest": {
      "@id": "stencila:compileDigest",
      "description": "A digest of the `code` and `styleLanguage`.",
      "$comment": "Used to avoid unnecessary transpilation to CSS.",
      "$ref": "ExecutionDigest.schema.json"
    },
    "errors": {
      "@id": "stencila:errors",
      "description": "Errors that occurred when transpiling the `code`.",
      "$comment": "This property is an array of strings. Compare this to `CodeChunk.errors`\nwhich is an array of `CodeError` nodes. Strings are considered to\nbe sufficient for style parsing errors which usually won't have stack traces,\nline numbers etc.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "css": {
      "@id": "stencila:css",
      "description": "A Cascading Style Sheet (CSS) transpiled from the `code` property.",
      "type": "string"
    },
    "classes": {
      "@id": "stencila:classes",
      "description": "A list of class names associated with the node",
      "$comment": "Analogous to the [`classList` property of an `Element`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList)\nin the Web API.\n",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "content": {
      "@id": "stencila:content",
      "description": "The content within the span",
      "strip": [
        "types"
      ],
      "type": "array",
      "items": {
        "$ref": "Inline.schema.json"
      }
    }
  }
}