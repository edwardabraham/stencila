{
  "$schema": "https://stencila.dev/meta.schema.json",
  "$id": "https://stencila.dev/Text.schema.json",
  "@id": "schema:Text",
  "title": "Text",
  "extends": [
    "Entity"
  ],
  "category": "prose",
  "description": "Textual content",
  "$comment": "Intended mostly for use for inline text e.g. the text in a paragraph.\n\nDiffers from the primitive `String` type in that it has a `type` and `id` property.\nThe `id` property allows use to identify text nodes with a sequence of inline nodes\nfor better diffing.\n\nAlso, in Rust, the `value` property is implemented as a CRDT.\n",
  "html": {
    "elem": "span"
  },
  "jats": {
    "special": true
  },
  "markdown": {
    "format": "{value}"
  },
  "required": [
    "type",
    "value"
  ],
  "core": [
    "id"
  ],
  "properties": {
    "type": {
      "@id": "schema:type",
      "description": "The type of this item",
      "$comment": "This is a special property analogous to JSON-LD's `@type` keyword.\n",
      "type": "string"
    },
    "id": {
      "@id": "schema:id",
      "description": "The identifier for this item",
      "$comment": "This is a special property analogous to JSON-LD's `@id` keyword.\n",
      "strip": [
        "id"
      ],
      "html": {
        "attr": "id"
      },
      "type": "string"
    },
    "value": {
      "@id": "schema:value",
      "description": "The value of the text content",
      "html": {
        "content": true
      },
      "$ref": "Cord.schema.json"
    }
  }
}